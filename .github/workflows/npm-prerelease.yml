name: Prerelease a Node.js package on npm

on:
  workflow_call:
    inputs:
      node-version:
        description: Version of Node.js used to run the npm publish steps.
        type: string
        default: 20.x
        required: false
      npm-setup-command:
        description: Command used to setup the package before publishing to npm.
        type: string
        default: <auto>
        required: false
    secrets:
      github-token:
        required: true
      npm-token:
        required: true

jobs:
  prepare:
    runs-on: ubuntu-latest
    timeout-minutes: 5
    outputs:
      continue: ${{ steps.validation.outputs.continue }}
      npm-final-setup-command: ${{ steps.get-command.outputs.npm-final-setup-command }}
    steps:
      - name: Validation of the event
        id: validation
        # Only support workflow_dispatch and labeled pull requests to reduce security risk.
        # Ignore labeling events with a label other than 'npm-prerelease'
        if: ${{ (github.event_name == 'pull_request' && github.event.action == 'labeled' && github.event.label.name == 'npm-prerelease') || (github.event_name == 'workflow_dispatch') }}
        run: echo "continue=true" >> $GITHUB_OUTPUT
      - uses: actions/checkout@v4
        if: ${{ steps.validation.outputs.continue }}
      - name: Fail if package is scoped
        if: ${{ steps.validation.outputs.continue }}
        run: |
          PACKAGE_NAME=$(jq .name package.json | tr -d '"')
          if [[ $PACKAGE_NAME == @* ]]; then
            echo "Scoped packages are not supported for security reasons." 1>&2
            exit 1;
          fi
      - name: Get npm setup command
        id: get-command
        if: ${{ steps.validation.outputs.continue }}
        run: |
          SETUP_COMMAND="${{ inputs.npm-setup-command }}"
          if [ "$SETUP_COMMAND" = "<auto>" ]; then
            if [ -f "package-lock.json" ]; then
              SETUP_COMMAND="npm ci"
            else
              SETUP_COMMAND="npm install"
            fi
          fi
          echo "npm-final-setup-command=$SETUP_COMMAND" >> $GITHUB_OUTPUT
  npm-publish:
    needs: prepare
    if: ${{ needs.prepare.outputs.continue }}
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ inputs.node-version }}
          registry-url: "https://registry.npmjs.org"
      - name: Run npm setup command
        run: ${{ needs.prepare.outputs.npm-final-setup-command }}
      - name: Get package version
        run: |
          PACKAGE_NAME=$(jq .name package.json | tr -d '"')
          echo "PACKAGE_NAME=$PACKAGE_NAME" >> $GITHUB_ENV
          # First increment the patch version number, then add the epoch seconds as a prerelease version.
          npm version --no-git-tag-version patch
          PACKAGE_VERSION=$(jq .version package.json | tr -d '"')
          NPM_VERSION=$PACKAGE_VERSION-pre.$EPOCHSECONDS
          echo "NPM_VERSION=$NPM_VERSION" >> $GITHUB_ENV
          npm version --no-git-tag-version $NPM_VERSION
      - name: Publish package to npm
        run: npm publish --access public --tag pre
        env:
          NODE_AUTH_TOKEN: ${{ secrets.npm-token }}
      - name: Remove label
        if: ${{ github.event_name == 'pull_request' && github.event.label.name }}
        run: |
          gh pr edit ${{ github.event.number }} --remove-label ${{ github.event.label.name }}
        env:
          GH_TOKEN: ${{ secrets.github-token }}
      - name: Post comment on GitHub
        if: ${{ github.event_name == 'pull_request' }}
        run: |
          gh pr comment ${{ github.event.number }} --body-file - <<EOF
          Published prerelease version \`$NPM_VERSION\` to npm.

          To install it, run:

          \`\`\`sh
          npm install --save-exact $PACKAGE_NAME@$NPM_VERSION
          \`\`\`

          EOF
        env:
          GH_TOKEN: ${{ secrets.github-token }}
